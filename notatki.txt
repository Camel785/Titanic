tworzymy folder za pomoca mkdir Titanic w nim ls sprawdza czy cos jest, touch main.py.. tworzymy w folderze
potem dajemy git init aby zainicjalizowac nowy git w naszy folderze, jest on widoczny nie jako ls a jako ls -a bo jest schowany
uzywamy git status aby zoabczyc ktore pliki sa w katalogu roboczym (chyba)
git add main.py robimy jako tracking i czekamy do zatwierdzenia uzyj git add . aby dodac wszystkie pliki
git commit -m "blabla" zatwierdza nam pliki

czyli dodalismy wszystkie zmiany do Stagign Area i dopiero po uzyciu git commit dodajemy je do local repository
(mozliwe ze to wlasnie na tym etapie mialem nie dodawac wszystkich plikow
ale to sie jeszcz eokaze, bo bedzie przeciez jeszcze gitingore)


usunalem text w data.csv i zapisalem to aby nauczyc sie oblsugi git checkout,
git diff data.csv pokazuje jakie zmiany zrobilismy, i teraz uzywamy gitcheckout jezeli chcemy wrocic do wersji,
ktora zapisalismy wczesnije i dodalismy za pomoca git commit
(.venv) dorotaowczarek@Dorotkas-MacBook-Pro Titanic % git checkout data.csv
Updated 1 path from the index
(.venv) dorotaowczarek@Dorotkas-MacBook-Pro Titanic % git log
kolor niebieski ktory podswietla nazwy plikow oznacza ze sa do git add ponownego bo rpzeciez piszac tu,
 caly czas wprowadzam zmiany w stosunku do tego co bylo
 tj moglbym teraz zrobic checkout text.txt i wsyzstko by sie poszlo w diabli...

q = wracamy do terminala z roznych dziwnych sytuacji w ktorych nie wiemy co wcisnac XD

git push pcha wszystlie pliki lokalnie to github
 git remote add origin https://github.com/Camel785/Titanic.git
git push (#u-#z tym nie dziala?) origin main

i po tych komendach cmnd r na github i zobaczymy wszystko w internecie... niesamowite tbh

tworzymy sekretny plik  touch .gitignore ktorego nie bedzie widac chyba ze wywolamy za pomoca ls -a

git rm --cached -r . usuwa wszystko z katalogu przejsciowego to jest po git add a przed git commit
tj jak dodamy niechcaca ds store itp i chcemy wrocic



hmm dodalismy gitignore do github ale wciaz nie wiem jak sie tam chowa rzeczy, zeby nie byly wyswietlane??? hmmmorigin main
okej juz wiemy jak to dziala, dziala :D



teraz rozgaleziamy naszego gita za pomoca git branch moja_nazwa_co_chce_zrobic
po stworzeniu git branch komenda git branch pokazuje nam w ktorym jestesmy mierjscu tj main czy moja_nazwa...


